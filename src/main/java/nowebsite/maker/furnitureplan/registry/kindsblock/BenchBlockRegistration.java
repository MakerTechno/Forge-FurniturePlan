package nowebsite.maker.furnitureplan.registry.kindsblock;

import com.mojang.datafixers.DSL;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.WeatheringCopper;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.block.entity.BlockEntityType.Builder;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.neoforged.neoforge.registries.DeferredHolder;
import nowebsite.maker.furnitureplan.blocks.singleblockfurniture.BenchBlock;
import nowebsite.maker.furnitureplan.blocks.singleblockfurniture.WeatheredCopperBench;
import nowebsite.maker.furnitureplan.blocks.singleblockfurniture.blockentities.BenchBlockEntity;
import nowebsite.maker.furnitureplan.registry.BlockRegistration;
import nowebsite.maker.furnitureplan.registry.ItemRegistration;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;

public class BenchBlockRegistration {
    public static void init() {}

    public static final DeferredHolder<Block, BenchBlock> OAK_BENCH = BlockRegistration.BLOCKS.register("oak_bench", () -> usageBenchBlock(BenchBlockRegistration.OAK_BENCH_ENTITY, Blocks.OAK_PLANKS));
    public static final DeferredHolder<Block, BenchBlock> COBBLESTONE_BENCH = BlockRegistration.BLOCKS.register("cobblestone_bench", () -> usageBenchBlock(BenchBlockRegistration.COBBLESTONE_BENCH_ENTITY, Blocks.COBBLESTONE));
    public static final DeferredHolder<Block, BenchBlock> BRICK_BENCH = BlockRegistration.BLOCKS.register("brick_bench", () -> usageBenchBlock(BenchBlockRegistration.BRICK_BENCH_ENTITY, Blocks.BRICKS));
    public static final DeferredHolder<Block, BenchBlock> STONE_BRICK_BENCH = BlockRegistration.BLOCKS.register("stone_brick_bench", () -> usageBenchBlock(BenchBlockRegistration.STONE_BRICK_BENCH_ENTITY, Blocks.STONE_BRICKS));
    public static final DeferredHolder<Block, BenchBlock> MUD_BRICK_BENCH = BlockRegistration.BLOCKS.register("mud_brick_bench", () -> usageBenchBlock(BenchBlockRegistration.MUD_BRICK_BENCH_ENTITY, Blocks.MUD_BRICKS));
    public static final DeferredHolder<Block, BenchBlock> NETHER_BRICK_BENCH = BlockRegistration.BLOCKS.register("nether_brick_bench", () -> usageBenchBlock(BenchBlockRegistration.NETHER_BRICK_BENCH_ENTITY, Blocks.NETHER_BRICKS));
    public static final DeferredHolder<Block, BenchBlock> SANDSTONE_BENCH = BlockRegistration.BLOCKS.register("sandstone_bench", () -> usageBenchBlock(BenchBlockRegistration.SANDSTONE_BENCH_ENTITY, Blocks.SANDSTONE));
    public static final DeferredHolder<Block, BenchBlock> SPRUCE_BENCH = BlockRegistration.BLOCKS.register("spruce_bench", () -> usageBenchBlock(BenchBlockRegistration.SPRUCE_BENCH_ENTITY, Blocks.SPRUCE_PLANKS));
    public static final DeferredHolder<Block, BenchBlock> BIRCH_BENCH = BlockRegistration.BLOCKS.register("birch_bench", () -> usageBenchBlock(BenchBlockRegistration.BIRCH_BENCH_ENTITY, Blocks.BIRCH_PLANKS));
    public static final DeferredHolder<Block, BenchBlock> JUNGLE_BENCH = BlockRegistration.BLOCKS.register("jungle_bench", () -> usageBenchBlock(BenchBlockRegistration.JUNGLE_BENCH_ENTITY, Blocks.JUNGLE_PLANKS));
    public static final DeferredHolder<Block, BenchBlock> QUARTZ_BENCH = BlockRegistration.BLOCKS.register("quartz_bench", () -> usageBenchBlock(BenchBlockRegistration.QUARTZ_BENCH_ENTITY, Blocks.QUARTZ_BLOCK));
    public static final DeferredHolder<Block, BenchBlock> ACACIA_BENCH = BlockRegistration.BLOCKS.register("acacia_bench", () -> usageBenchBlock(BenchBlockRegistration.ACACIA_BENCH_ENTITY, Blocks.ACACIA_PLANKS));
    public static final DeferredHolder<Block, BenchBlock> CHERRY_BENCH = BlockRegistration.BLOCKS.register("cherry_bench", () -> usageBenchBlock(BenchBlockRegistration.CHERRY_BENCH_ENTITY, Blocks.CHERRY_PLANKS));
    public static final DeferredHolder<Block, BenchBlock> DARK_OAK_BENCH = BlockRegistration.BLOCKS.register("dark_oak_bench", () -> usageBenchBlock(BenchBlockRegistration.DARK_OAK_BENCH_ENTITY, Blocks.DARK_OAK_PLANKS));
    public static final DeferredHolder<Block, BenchBlock> MANGROVE_BENCH = BlockRegistration.BLOCKS.register("mangrove_bench", () -> usageBenchBlock(BenchBlockRegistration.MANGROVE_BENCH_ENTITY, Blocks.MANGROVE_PLANKS));
    public static final DeferredHolder<Block, BenchBlock> BAMBOO_BENCH = BlockRegistration.BLOCKS.register("bamboo_bench", () -> usageBenchBlock(BenchBlockRegistration.BAMBOO_BENCH_ENTITY, Blocks.BAMBOO_PLANKS));
    public static final DeferredHolder<Block, BenchBlock> BAMBOO_MOSAIC_BENCH = BlockRegistration.BLOCKS.register("bamboo_mosaic_bench", () -> usageBenchBlock(BenchBlockRegistration.BAMBOO_MOSAIC_BENCH_ENTITY, Blocks.BAMBOO_MOSAIC));
    public static final DeferredHolder<Block, BenchBlock> PRISMARINE_BENCH = BlockRegistration.BLOCKS.register("prismarine_bench", () -> usageBenchBlock(BenchBlockRegistration.PRISMARINE_BENCH_ENTITY, Blocks.PRISMARINE));
    public static final DeferredHolder<Block, BenchBlock> PRISMARINE_BRICK_BENCH = BlockRegistration.BLOCKS.register("prismarine_brick_bench", () -> usageBenchBlock(BenchBlockRegistration.PRISMARINE_BRICK_BENCH_ENTITY, Blocks.PRISMARINE_BRICKS));
    public static final DeferredHolder<Block, BenchBlock> DARK_PRISMARINE_BENCH = BlockRegistration.BLOCKS.register("dark_prismarine_bench", () -> usageBenchBlock(BenchBlockRegistration.DARK_PRISMARINE_BENCH_ENTITY, Blocks.DARK_PRISMARINE));
    public static final DeferredHolder<Block, BenchBlock> RED_SANDSTONE_BENCH = BlockRegistration.BLOCKS.register("red_sandstone_bench", () -> usageBenchBlock(BenchBlockRegistration.RED_SANDSTONE_BENCH_ENTITY, Blocks.RED_SANDSTONE));
    public static final DeferredHolder<Block, BenchBlock> PURPUR_BENCH = BlockRegistration.BLOCKS.register("purpur_bench", () -> usageBenchBlock(BenchBlockRegistration.PURPUR_BENCH_ENTITY, Blocks.PURPUR_BLOCK));
    public static final DeferredHolder<Block, BenchBlock> POLISHED_GRANITE_BENCH = BlockRegistration.BLOCKS.register("polished_granite_bench", () -> usageBenchBlock(BenchBlockRegistration.POLISHED_GRANITE_BENCH_ENTITY, Blocks.POLISHED_GRANITE));
    public static final DeferredHolder<Block, BenchBlock> SMOOTH_RED_SANDSTONE_BENCH = BlockRegistration.BLOCKS.register("smooth_red_sandstone_bench", () -> usageBenchBlock(BenchBlockRegistration.SMOOTH_RED_SANDSTONE_BENCH_ENTITY, Blocks.SMOOTH_RED_SANDSTONE));
    public static final DeferredHolder<Block, BenchBlock> MOSSY_STONE_BRICK_BENCH = BlockRegistration.BLOCKS.register("mossy_stone_brick_bench", () -> usageBenchBlock(BenchBlockRegistration.MOSSY_STONE_BRICK_BENCH_ENTITY, Blocks.MOSSY_STONE_BRICKS));
    public static final DeferredHolder<Block, BenchBlock> POLISHED_DIORITE_BENCH = BlockRegistration.BLOCKS.register("polished_diorite_bench", () -> usageBenchBlock(BenchBlockRegistration.POLISHED_DIORITE_BENCH_ENTITY, Blocks.POLISHED_DIORITE));
    public static final DeferredHolder<Block, BenchBlock> MOSSY_COBBLESTONE_BENCH = BlockRegistration.BLOCKS.register("mossy_cobblestone_bench", () -> usageBenchBlock(BenchBlockRegistration.MOSSY_COBBLESTONE_BENCH_ENTITY, Blocks.MOSSY_COBBLESTONE));
    public static final DeferredHolder<Block, BenchBlock> END_STONE_BRICK_BENCH = BlockRegistration.BLOCKS.register("end_stone_brick_bench", () -> usageBenchBlock(BenchBlockRegistration.END_STONE_BRICK_BENCH_ENTITY, Blocks.END_STONE_BRICKS));
    public static final DeferredHolder<Block, BenchBlock> STONE_BENCH = BlockRegistration.BLOCKS.register("stone_bench", () -> usageBenchBlock(BenchBlockRegistration.STONE_BENCH_ENTITY, Blocks.STONE));
    public static final DeferredHolder<Block, BenchBlock> SMOOTH_SANDSTONE_BENCH = BlockRegistration.BLOCKS.register("smooth_sandstone_bench", () -> usageBenchBlock(BenchBlockRegistration.SMOOTH_SANDSTONE_BENCH_ENTITY, Blocks.SMOOTH_SANDSTONE));
    public static final DeferredHolder<Block, BenchBlock> SMOOTH_QUARTZ_BENCH = BlockRegistration.BLOCKS.register("smooth_quartz_bench", () -> usageBenchBlock(BenchBlockRegistration.SMOOTH_QUARTZ_BENCH_ENTITY, Blocks.SMOOTH_QUARTZ));
    public static final DeferredHolder<Block, BenchBlock> GRANITE_BENCH = BlockRegistration.BLOCKS.register("granite_bench", () -> usageBenchBlock(BenchBlockRegistration.GRANITE_BENCH_ENTITY, Blocks.GRANITE));
    public static final DeferredHolder<Block, BenchBlock> ANDESITE_BENCH = BlockRegistration.BLOCKS.register("andesite_bench", () -> usageBenchBlock(BenchBlockRegistration.ANDESITE_BENCH_ENTITY, Blocks.ANDESITE));
    public static final DeferredHolder<Block, BenchBlock> RED_NETHER_BRICK_BENCH = BlockRegistration.BLOCKS.register("red_nether_brick_bench", () -> usageBenchBlock(BenchBlockRegistration.RED_NETHER_BRICK_BENCH_ENTITY, Blocks.RED_NETHER_BRICKS));
    public static final DeferredHolder<Block, BenchBlock> POLISHED_ANDESITE_BENCH = BlockRegistration.BLOCKS.register("polished_andesite_bench", () -> usageBenchBlock(BenchBlockRegistration.POLISHED_ANDESITE_BENCH_ENTITY, Blocks.POLISHED_ANDESITE));
    public static final DeferredHolder<Block, BenchBlock> DIORITE_BENCH = BlockRegistration.BLOCKS.register("diorite_bench", () -> usageBenchBlock(BenchBlockRegistration.DIORITE_BENCH_ENTITY, Blocks.DIORITE));
    public static final DeferredHolder<Block, BenchBlock> CRIMSON_BENCH = BlockRegistration.BLOCKS.register("crimson_bench", () -> usageBenchBlock(BenchBlockRegistration.CRIMSON_BENCH_ENTITY, Blocks.CRIMSON_PLANKS));
    public static final DeferredHolder<Block, BenchBlock> WARPED_BENCH = BlockRegistration.BLOCKS.register("warped_bench", () -> usageBenchBlock(BenchBlockRegistration.WARPED_BENCH_ENTITY, Blocks.WARPED_PLANKS));
    public static final DeferredHolder<Block, BenchBlock> BLACKSTONE_BENCH = BlockRegistration.BLOCKS.register("blackstone_bench", () -> usageBenchBlock(BenchBlockRegistration.BLACKSTONE_BENCH_ENTITY, Blocks.BLACKSTONE));
    public static final DeferredHolder<Block, BenchBlock> POLISHED_BLACKSTONE_BRICK_BENCH = BlockRegistration.BLOCKS.register("polished_blackstone_brick_bench", () -> usageBenchBlock(BenchBlockRegistration.POLISHED_BLACKSTONE_BRICK_BENCH_ENTITY, Blocks.POLISHED_BLACKSTONE_BRICKS));
    public static final DeferredHolder<Block, BenchBlock> POLISHED_BLACKSTONE_BENCH = BlockRegistration.BLOCKS.register("polished_blackstone_bench", () -> usageBenchBlock(BenchBlockRegistration.POLISHED_BLACKSTONE_BENCH_ENTITY, Blocks.POLISHED_BLACKSTONE));
    public static final DeferredHolder<Block, WeatheredCopperBench> OXIDIZED_CUT_COPPER_BENCH = BlockRegistration.BLOCKS.register("oxidized_cut_copper_bench", () -> usageWeatheredBench(BenchBlockRegistration.OXIDIZED_CUT_COPPER_BENCH_ENTITY, Blocks.OXIDIZED_CUT_COPPER, WeatheringCopper.WeatherState.OXIDIZED));
    public static final DeferredHolder<Block, WeatheredCopperBench> WEATHERED_CUT_COPPER_BENCH = BlockRegistration.BLOCKS.register("weathered_cut_copper_bench", () -> usageWeatheredBench(BenchBlockRegistration.WEATHERED_CUT_COPPER_BENCH_ENTITY, Blocks.WEATHERED_CUT_COPPER, WeatheringCopper.WeatherState.WEATHERED));
    public static final DeferredHolder<Block, WeatheredCopperBench> EXPOSED_CUT_COPPER_BENCH = BlockRegistration.BLOCKS.register("exposed_cut_copper_bench", () -> usageWeatheredBench(BenchBlockRegistration.EXPOSED_CUT_COPPER_BENCH_ENTITY, Blocks.EXPOSED_CUT_COPPER, WeatheringCopper.WeatherState.EXPOSED));
    public static final DeferredHolder<Block, WeatheredCopperBench> CUT_COPPER_BENCH = BlockRegistration.BLOCKS.register("cut_copper_bench", () -> usageWeatheredBench(BenchBlockRegistration.CUT_COPPER_BENCH_ENTITY, Blocks.CUT_COPPER, WeatheringCopper.WeatherState.UNAFFECTED));
    public static final DeferredHolder<Block, BenchBlock> WAXED_OXIDIZED_CUT_COPPER_BENCH = BlockRegistration.BLOCKS.register("waxed_oxidized_cut_copper_bench", () -> usageBenchBlock(BenchBlockRegistration.WAXED_OXIDIZED_CUT_COPPER_BENCH_ENTITY, Blocks.WAXED_OXIDIZED_CUT_COPPER));
    public static final DeferredHolder<Block, BenchBlock> WAXED_WEATHERED_CUT_COPPER_BENCH = BlockRegistration.BLOCKS.register("waxed_weathered_cut_copper_bench", () -> usageBenchBlock(BenchBlockRegistration.WAXED_WEATHERED_CUT_COPPER_BENCH_ENTITY, Blocks.WAXED_WEATHERED_CUT_COPPER));
    public static final DeferredHolder<Block, BenchBlock> WAXED_EXPOSED_CUT_COPPER_BENCH = BlockRegistration.BLOCKS.register("waxed_exposed_cut_copper_bench", () -> usageBenchBlock(BenchBlockRegistration.WAXED_EXPOSED_CUT_COPPER_BENCH_ENTITY, Blocks.WAXED_EXPOSED_CUT_COPPER));
    public static final DeferredHolder<Block, BenchBlock> WAXED_CUT_COPPER_BENCH = BlockRegistration.BLOCKS.register("waxed_cut_copper_bench", () -> usageBenchBlock(BenchBlockRegistration.WAXED_CUT_COPPER_BENCH_ENTITY, Blocks.WAXED_CUT_COPPER));
    public static final DeferredHolder<Block, BenchBlock> COBBLED_DEEPSLATE_BENCH = BlockRegistration.BLOCKS.register("cobbled_deepslate_bench", () -> usageBenchBlock(BenchBlockRegistration.COBBLED_DEEPSLATE_BENCH_ENTITY, Blocks.COBBLED_DEEPSLATE));
    public static final DeferredHolder<Block, BenchBlock> POLISHED_DEEPSLATE_BENCH = BlockRegistration.BLOCKS.register("polished_deepslate_bench", () -> usageBenchBlock(BenchBlockRegistration.POLISHED_DEEPSLATE_BENCH_ENTITY, Blocks.POLISHED_DEEPSLATE));
    public static final DeferredHolder<Block, BenchBlock> DEEPSLATE_TILE_BENCH = BlockRegistration.BLOCKS.register("deepslate_tile_bench", () -> usageBenchBlock(BenchBlockRegistration.DEEPSLATE_TILE_BENCH_ENTITY, Blocks.DEEPSLATE_TILES));
    public static final DeferredHolder<Block, BenchBlock> DEEPSLATE_BRICK_BENCH = BlockRegistration.BLOCKS.register("deepslate_brick_bench", () -> usageBenchBlock(BenchBlockRegistration.DEEPSLATE_BRICK_BENCH_ENTITY, Blocks.DEEPSLATE_BRICKS));
    public static final DeferredHolder<Item, BlockItem> OAK_BENCH_ITEM = ItemRegistration.ITEMS.register("oak_bench", () -> new BlockItem(OAK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> COBBLESTONE_BENCH_ITEM = ItemRegistration.ITEMS.register("cobblestone_bench", () -> new BlockItem(COBBLESTONE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> BRICK_BENCH_ITEM = ItemRegistration.ITEMS.register("brick_bench", () -> new BlockItem(BRICK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> STONE_BRICK_BENCH_ITEM = ItemRegistration.ITEMS.register("stone_brick_bench", () -> new BlockItem(STONE_BRICK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> MUD_BRICK_BENCH_ITEM = ItemRegistration.ITEMS.register("mud_brick_bench", () -> new BlockItem(MUD_BRICK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> NETHER_BRICK_BENCH_ITEM = ItemRegistration.ITEMS.register("nether_brick_bench", () -> new BlockItem(NETHER_BRICK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> SANDSTONE_BENCH_ITEM = ItemRegistration.ITEMS.register("sandstone_bench", () -> new BlockItem(SANDSTONE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> SPRUCE_BENCH_ITEM = ItemRegistration.ITEMS.register("spruce_bench", () -> new BlockItem(SPRUCE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> BIRCH_BENCH_ITEM = ItemRegistration.ITEMS.register("birch_bench", () -> new BlockItem(BIRCH_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> JUNGLE_BENCH_ITEM = ItemRegistration.ITEMS.register("jungle_bench", () -> new BlockItem(JUNGLE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> QUARTZ_BENCH_ITEM = ItemRegistration.ITEMS.register("quartz_bench", () -> new BlockItem(QUARTZ_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> ACACIA_BENCH_ITEM = ItemRegistration.ITEMS.register("acacia_bench", () -> new BlockItem(ACACIA_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> CHERRY_BENCH_ITEM = ItemRegistration.ITEMS.register("cherry_bench", () -> new BlockItem(CHERRY_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> DARK_OAK_BENCH_ITEM = ItemRegistration.ITEMS.register("dark_oak_bench", () -> new BlockItem(DARK_OAK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> MANGROVE_BENCH_ITEM = ItemRegistration.ITEMS.register("mangrove_bench", () -> new BlockItem(MANGROVE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> BAMBOO_BENCH_ITEM = ItemRegistration.ITEMS.register("bamboo_bench", () -> new BlockItem(BAMBOO_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> BAMBOO_MOSAIC_BENCH_ITEM = ItemRegistration.ITEMS.register("bamboo_mosaic_bench", () -> new BlockItem(BAMBOO_MOSAIC_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> PRISMARINE_BENCH_ITEM = ItemRegistration.ITEMS.register("prismarine_bench", () -> new BlockItem(PRISMARINE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> PRISMARINE_BRICK_BENCH_ITEM = ItemRegistration.ITEMS.register("prismarine_brick_bench", () -> new BlockItem(PRISMARINE_BRICK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> DARK_PRISMARINE_BENCH_ITEM = ItemRegistration.ITEMS.register("dark_prismarine_bench", () -> new BlockItem(DARK_PRISMARINE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> RED_SANDSTONE_BENCH_ITEM = ItemRegistration.ITEMS.register("red_sandstone_bench", () -> new BlockItem(RED_SANDSTONE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> PURPUR_BENCH_ITEM = ItemRegistration.ITEMS.register("purpur_bench", () -> new BlockItem(PURPUR_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> POLISHED_GRANITE_BENCH_ITEM = ItemRegistration.ITEMS.register("polished_granite_bench", () -> new BlockItem(POLISHED_GRANITE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> SMOOTH_RED_SANDSTONE_BENCH_ITEM = ItemRegistration.ITEMS.register("smooth_red_sandstone_bench", () -> new BlockItem(SMOOTH_RED_SANDSTONE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> MOSSY_STONE_BRICK_BENCH_ITEM = ItemRegistration.ITEMS.register("mossy_stone_brick_bench", () -> new BlockItem(MOSSY_STONE_BRICK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> POLISHED_DIORITE_BENCH_ITEM = ItemRegistration.ITEMS.register("polished_diorite_bench", () -> new BlockItem(POLISHED_DIORITE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> MOSSY_COBBLESTONE_BENCH_ITEM = ItemRegistration.ITEMS.register("mossy_cobblestone_bench", () -> new BlockItem(MOSSY_COBBLESTONE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> END_STONE_BRICK_BENCH_ITEM = ItemRegistration.ITEMS.register("end_stone_brick_bench", () -> new BlockItem(END_STONE_BRICK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> STONE_BENCH_ITEM = ItemRegistration.ITEMS.register("stone_bench", () -> new BlockItem(STONE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> SMOOTH_SANDSTONE_BENCH_ITEM = ItemRegistration.ITEMS.register("smooth_sandstone_bench", () -> new BlockItem(SMOOTH_SANDSTONE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> SMOOTH_QUARTZ_BENCH_ITEM = ItemRegistration.ITEMS.register("smooth_quartz_bench", () -> new BlockItem(SMOOTH_QUARTZ_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> GRANITE_BENCH_ITEM = ItemRegistration.ITEMS.register("granite_bench", () -> new BlockItem(GRANITE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> ANDESITE_BENCH_ITEM = ItemRegistration.ITEMS.register("andesite_bench", () -> new BlockItem(ANDESITE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> RED_NETHER_BRICK_BENCH_ITEM = ItemRegistration.ITEMS.register("red_nether_brick_bench", () -> new BlockItem(RED_NETHER_BRICK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> POLISHED_ANDESITE_BENCH_ITEM = ItemRegistration.ITEMS.register("polished_andesite_bench", () -> new BlockItem(POLISHED_ANDESITE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> DIORITE_BENCH_ITEM = ItemRegistration.ITEMS.register("diorite_bench", () -> new BlockItem(DIORITE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> CRIMSON_BENCH_ITEM = ItemRegistration.ITEMS.register("crimson_bench", () -> new BlockItem(CRIMSON_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> WARPED_BENCH_ITEM = ItemRegistration.ITEMS.register("warped_bench", () -> new BlockItem(WARPED_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> BLACKSTONE_BENCH_ITEM = ItemRegistration.ITEMS.register("blackstone_bench", () -> new BlockItem(BLACKSTONE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> POLISHED_BLACKSTONE_BRICK_BENCH_ITEM = ItemRegistration.ITEMS.register("polished_blackstone_brick_bench", () -> new BlockItem(POLISHED_BLACKSTONE_BRICK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> POLISHED_BLACKSTONE_BENCH_ITEM = ItemRegistration.ITEMS.register("polished_blackstone_bench", () -> new BlockItem(POLISHED_BLACKSTONE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> OXIDIZED_CUT_COPPER_BENCH_ITEM = ItemRegistration.ITEMS.register("oxidized_cut_copper_bench", () -> new BlockItem(OXIDIZED_CUT_COPPER_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> WEATHERED_CUT_COPPER_BENCH_ITEM = ItemRegistration.ITEMS.register("weathered_cut_copper_bench", () -> new BlockItem(WEATHERED_CUT_COPPER_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> EXPOSED_CUT_COPPER_BENCH_ITEM = ItemRegistration.ITEMS.register("exposed_cut_copper_bench", () -> new BlockItem(EXPOSED_CUT_COPPER_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> CUT_COPPER_BENCH_ITEM = ItemRegistration.ITEMS.register("cut_copper_bench", () -> new BlockItem(CUT_COPPER_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> WAXED_OXIDIZED_CUT_COPPER_BENCH_ITEM = ItemRegistration.ITEMS.register("waxed_oxidized_cut_copper_bench", () -> new BlockItem(WAXED_OXIDIZED_CUT_COPPER_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> WAXED_WEATHERED_CUT_COPPER_BENCH_ITEM = ItemRegistration.ITEMS.register("waxed_weathered_cut_copper_bench", () -> new BlockItem(WAXED_WEATHERED_CUT_COPPER_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> WAXED_EXPOSED_CUT_COPPER_BENCH_ITEM = ItemRegistration.ITEMS.register("waxed_exposed_cut_copper_bench", () -> new BlockItem(WAXED_EXPOSED_CUT_COPPER_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> WAXED_CUT_COPPER_BENCH_ITEM = ItemRegistration.ITEMS.register("waxed_cut_copper_bench", () -> new BlockItem(WAXED_CUT_COPPER_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> COBBLED_DEEPSLATE_BENCH_ITEM = ItemRegistration.ITEMS.register("cobbled_deepslate_bench", () -> new BlockItem(COBBLED_DEEPSLATE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> POLISHED_DEEPSLATE_BENCH_ITEM = ItemRegistration.ITEMS.register("polished_deepslate_bench", () -> new BlockItem(POLISHED_DEEPSLATE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> DEEPSLATE_TILE_BENCH_ITEM = ItemRegistration.ITEMS.register("deepslate_tile_bench", () -> new BlockItem(DEEPSLATE_TILE_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> DEEPSLATE_BRICK_BENCH_ITEM = ItemRegistration.ITEMS.register("deepslate_brick_bench", () -> new BlockItem(DEEPSLATE_BRICK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> OAK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("oak_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.OAK_BENCH_ENTITY, pos, state), OAK_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> COBBLESTONE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("cobblestone_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.COBBLESTONE_BENCH_ENTITY, pos, state), COBBLESTONE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> BRICK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("brick_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.BRICK_BENCH_ENTITY, pos, state), BRICK_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> STONE_BRICK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("stone_brick_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.STONE_BRICK_BENCH_ENTITY, pos, state), STONE_BRICK_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> MUD_BRICK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("mud_brick_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.MUD_BRICK_BENCH_ENTITY, pos, state), MUD_BRICK_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> NETHER_BRICK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("nether_brick_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.NETHER_BRICK_BENCH_ENTITY, pos, state), NETHER_BRICK_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> SANDSTONE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("sandstone_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.SANDSTONE_BENCH_ENTITY, pos, state), SANDSTONE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> SPRUCE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("spruce_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.SPRUCE_BENCH_ENTITY, pos, state), SPRUCE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> BIRCH_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("birch_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.BIRCH_BENCH_ENTITY, pos, state), BIRCH_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> JUNGLE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("jungle_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.JUNGLE_BENCH_ENTITY, pos, state), JUNGLE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> QUARTZ_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("quartz_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.QUARTZ_BENCH_ENTITY, pos, state), QUARTZ_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> ACACIA_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("acacia_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.ACACIA_BENCH_ENTITY, pos, state), ACACIA_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> CHERRY_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("cherry_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.CHERRY_BENCH_ENTITY, pos, state), CHERRY_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> DARK_OAK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("dark_oak_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.DARK_OAK_BENCH_ENTITY, pos, state), DARK_OAK_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> MANGROVE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("mangrove_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.MANGROVE_BENCH_ENTITY, pos, state), MANGROVE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> BAMBOO_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("bamboo_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.BAMBOO_BENCH_ENTITY, pos, state), BAMBOO_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> BAMBOO_MOSAIC_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("bamboo_mosaic_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.BAMBOO_MOSAIC_BENCH_ENTITY, pos, state), BAMBOO_MOSAIC_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> PRISMARINE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("prismarine_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.PRISMARINE_BENCH_ENTITY, pos, state), PRISMARINE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> PRISMARINE_BRICK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("prismarine_brick_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.PRISMARINE_BRICK_BENCH_ENTITY, pos, state), PRISMARINE_BRICK_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> DARK_PRISMARINE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("dark_prismarine_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.DARK_PRISMARINE_BENCH_ENTITY, pos, state), DARK_PRISMARINE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> RED_SANDSTONE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("red_sandstone_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.RED_SANDSTONE_BENCH_ENTITY, pos, state), RED_SANDSTONE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> PURPUR_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("purpur_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.PURPUR_BENCH_ENTITY, pos, state), PURPUR_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> POLISHED_GRANITE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("polished_granite_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.POLISHED_GRANITE_BENCH_ENTITY, pos, state), POLISHED_GRANITE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> SMOOTH_RED_SANDSTONE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("smooth_red_sandstone_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.SMOOTH_RED_SANDSTONE_BENCH_ENTITY, pos, state), SMOOTH_RED_SANDSTONE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> MOSSY_STONE_BRICK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("mossy_stone_brick_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.MOSSY_STONE_BRICK_BENCH_ENTITY, pos, state), MOSSY_STONE_BRICK_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> POLISHED_DIORITE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("polished_diorite_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.POLISHED_DIORITE_BENCH_ENTITY, pos, state), POLISHED_DIORITE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> MOSSY_COBBLESTONE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("mossy_cobblestone_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.MOSSY_COBBLESTONE_BENCH_ENTITY, pos, state), MOSSY_COBBLESTONE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> END_STONE_BRICK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("end_stone_brick_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.END_STONE_BRICK_BENCH_ENTITY, pos, state), END_STONE_BRICK_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> STONE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("stone_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.STONE_BENCH_ENTITY, pos, state), STONE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> SMOOTH_SANDSTONE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("smooth_sandstone_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.SMOOTH_SANDSTONE_BENCH_ENTITY, pos, state), SMOOTH_SANDSTONE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> SMOOTH_QUARTZ_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("smooth_quartz_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.SMOOTH_QUARTZ_BENCH_ENTITY, pos, state), SMOOTH_QUARTZ_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> GRANITE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("granite_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.GRANITE_BENCH_ENTITY, pos, state), GRANITE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> ANDESITE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("andesite_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.ANDESITE_BENCH_ENTITY, pos, state), ANDESITE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> RED_NETHER_BRICK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("red_nether_brick_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.RED_NETHER_BRICK_BENCH_ENTITY, pos, state), RED_NETHER_BRICK_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> POLISHED_ANDESITE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("polished_andesite_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.POLISHED_ANDESITE_BENCH_ENTITY, pos, state), POLISHED_ANDESITE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> DIORITE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("diorite_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.DIORITE_BENCH_ENTITY, pos, state), DIORITE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> CRIMSON_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("crimson_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.CRIMSON_BENCH_ENTITY, pos, state), CRIMSON_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> WARPED_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("warped_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.WARPED_BENCH_ENTITY, pos, state), WARPED_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> BLACKSTONE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("blackstone_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.BLACKSTONE_BENCH_ENTITY, pos, state), BLACKSTONE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> POLISHED_BLACKSTONE_BRICK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("polished_blackstone_brick_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.POLISHED_BLACKSTONE_BRICK_BENCH_ENTITY, pos, state), POLISHED_BLACKSTONE_BRICK_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> POLISHED_BLACKSTONE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("polished_blackstone_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.POLISHED_BLACKSTONE_BENCH_ENTITY, pos, state), POLISHED_BLACKSTONE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> OXIDIZED_CUT_COPPER_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("oxidized_cut_copper_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.OXIDIZED_CUT_COPPER_BENCH_ENTITY, pos, state), OXIDIZED_CUT_COPPER_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> WEATHERED_CUT_COPPER_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("weathered_cut_copper_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.WEATHERED_CUT_COPPER_BENCH_ENTITY, pos, state), WEATHERED_CUT_COPPER_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> EXPOSED_CUT_COPPER_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("exposed_cut_copper_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.EXPOSED_CUT_COPPER_BENCH_ENTITY, pos, state), EXPOSED_CUT_COPPER_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> CUT_COPPER_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("cut_copper_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.CUT_COPPER_BENCH_ENTITY, pos, state), CUT_COPPER_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> WAXED_OXIDIZED_CUT_COPPER_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("waxed_oxidized_cut_copper_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.WAXED_OXIDIZED_CUT_COPPER_BENCH_ENTITY, pos, state), WAXED_OXIDIZED_CUT_COPPER_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> WAXED_WEATHERED_CUT_COPPER_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("waxed_weathered_cut_copper_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.WAXED_WEATHERED_CUT_COPPER_BENCH_ENTITY, pos, state), WAXED_WEATHERED_CUT_COPPER_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> WAXED_EXPOSED_CUT_COPPER_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("waxed_exposed_cut_copper_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.WAXED_EXPOSED_CUT_COPPER_BENCH_ENTITY, pos, state), WAXED_EXPOSED_CUT_COPPER_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> WAXED_CUT_COPPER_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("waxed_cut_copper_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.WAXED_CUT_COPPER_BENCH_ENTITY, pos, state), WAXED_CUT_COPPER_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> COBBLED_DEEPSLATE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("cobbled_deepslate_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.COBBLED_DEEPSLATE_BENCH_ENTITY, pos, state), COBBLED_DEEPSLATE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> POLISHED_DEEPSLATE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("polished_deepslate_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.POLISHED_DEEPSLATE_BENCH_ENTITY, pos, state), POLISHED_DEEPSLATE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> DEEPSLATE_TILE_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("deepslate_tile_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.DEEPSLATE_TILE_BENCH_ENTITY, pos, state), DEEPSLATE_TILE_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> DEEPSLATE_BRICK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("deepslate_brick_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.DEEPSLATE_BRICK_BENCH_ENTITY, pos, state), DEEPSLATE_BRICK_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<Block, BenchBlock> TUFF_BENCH = BlockRegistration.BLOCKS.register("tuff_bench", () -> usageBenchBlock(BenchBlockRegistration.TUFF_BENCH_ENTITY, Blocks.TUFF));
    public static final DeferredHolder<Block, BenchBlock> POLISHED_TUFF_BENCH = BlockRegistration.BLOCKS.register("polished_tuff_bench", () -> usageBenchBlock(BenchBlockRegistration.POLISHED_TUFF_BENCH_ENTITY, Blocks.POLISHED_TUFF));
    public static final DeferredHolder<Block, BenchBlock> TUFF_BRICK_BENCH = BlockRegistration.BLOCKS.register("tuff_brick_bench", () -> usageBenchBlock(BenchBlockRegistration.TUFF_BRICK_BENCH_ENTITY, Blocks.TUFF_BRICKS));
    public static final DeferredHolder<Item, BlockItem> TUFF_BENCH_ITEM = ItemRegistration.ITEMS.register("tuff_bench", () -> new BlockItem(TUFF_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> POLISHED_TUFF_BENCH_ITEM = ItemRegistration.ITEMS.register("polished_tuff_bench", () -> new BlockItem(POLISHED_TUFF_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<Item, BlockItem> TUFF_BRICK_BENCH_ITEM = ItemRegistration.ITEMS.register("tuff_brick_bench", () -> new BlockItem(TUFF_BRICK_BENCH.get(), new Item.Properties()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> TUFF_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("tuff_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.TUFF_BENCH_ENTITY, pos, state), TUFF_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> POLISHED_TUFF_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("polished_tuff_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.POLISHED_TUFF_BENCH_ENTITY, pos, state), POLISHED_TUFF_BENCH.get()).build(DSL.remainderType()));
    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> TUFF_BRICK_BENCH_ENTITY = BlockRegistration.BLOCK_ENTITY.register("tuff_brick_bench", () -> Builder.of((pos, state) -> new BenchBlockEntity(BenchBlockRegistration.TUFF_BRICK_BENCH_ENTITY, pos, state), TUFF_BRICK_BENCH.get()).build(DSL.remainderType()));

    @Contract("_, _ -> new")
    @SuppressWarnings("deprecation")
    public static @NotNull BenchBlock usageBenchBlock(DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> type, @NotNull Block propertyBlock) {
        return new BenchBlock(type, propertyBlock.defaultBlockState(), BlockBehaviour.Properties.ofLegacyCopy(propertyBlock));
    }

    @Contract("_, _, _ -> new")
    @SuppressWarnings("deprecation")
    public static @NotNull WeatheredCopperBench usageWeatheredBench(DeferredHolder<BlockEntityType<?>, BlockEntityType<BenchBlockEntity>> type, @NotNull Block propertyBlock, WeatheringCopper.WeatherState weatherState) {
        return new WeatheredCopperBench(type, propertyBlock.defaultBlockState(), BlockBehaviour.Properties.ofLegacyCopy(propertyBlock), weatherState);
    }
}
